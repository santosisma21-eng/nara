# dependencies
node_modules/

# expo
.expo/
dist/
web-build/
expo-env.d.ts

# native
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macos
.DS_Store
*.pem

# local env files
.env*.local
.env

# typescript
*.tsbuildinfo

<?php
session_start();
require_once 'config/database.php';
require_once 'includes/functions.php';

// Inicializar base de datos si no existe
initializeDatabase();

$page = $_GET['page'] ?? 'dashboard';
?>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventario QR</title>
    <link rel="stylesheet" href="assets/css/style.css">
    <link rel="manifest" href="manifest.json">
    <meta name="theme-color" content="#2563EB">
    <link rel="icon" type="image/png" href="assets/images/icon-192.png">
</head>
<body>
    <div class="app-container">
        <!-- Header -->
        <header class="app-header">
            <h1>üì¶ Inventario QR</h1>
            <div class="header-actions">
                <button class="btn-icon" onclick="toggleMenu()">‚ò∞</button>
            </div>
        </header>

        <!-- Navigation -->
        <nav class="bottom-nav" id="bottomNav">
            <a href="?page=dashboard" class="nav-item <?= $page === 'dashboard' ? 'active' : '' ?>">
                <span class="nav-icon">üè†</span>
                <span class="nav-label">Inicio</span>
            </a>
            <a href="?page=areas" class="nav-item <?= $page === 'areas' ? 'active' : '' ?>">
                <span class="nav-icon">üìç</span>
                <span class="nav-label">√Åreas</span>
            </a>
            <a href="?page=scan" class="nav-item <?= $page === 'scan' ? 'active' : '' ?>">
                <span class="nav-icon">üì∑</span>
                <span class="nav-label">Escanear</span>
            </a>
            <a href="?page=create" class="nav-item <?= $page === 'create' ? 'active' : '' ?>">
                <span class="nav-icon">‚ûï</span>
                <span class="nav-label">Crear</span>
            </a>
        </nav>

        <!-- Main Content -->
        <main class="main-content">
            <?php
            switch($page) {
                case 'dashboard':
                    include 'pages/dashboard.php';
                    break;
                case 'areas':
                    include 'pages/areas.php';
                    break;
                case 'scan':
                    include 'pages/scan.php';
                    break;
                case 'create':
                    include 'pages/create.php';
                    break;
                case 'product':
                    include 'pages/product.php';
                    break;
                default:
                    include 'pages/dashboard.php';
            }
            ?>
        </main>
    </div>

    <!-- Scripts -->
    <script src="assets/js/app.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/qrcode@1.5.3/build/qrcode.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.js"></script>
</body>
</html>
{
  "name": "Inventario QR",
  "short_name": "InventarioQR",
  "description": "Aplicaci√≥n m√≥vil para gesti√≥n de inventario con c√≥digos QR",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#F8FAFC",
  "theme_color": "#2563EB",
  "orientation": "portrait",
  "scope": "/",
  "lang": "es",
  "icons": [
    {
      "src": "assets/images/icon-72.png",
      "sizes": "72x72",
      "type": "image/png",
      "purpose": "any maskable"
    },
    {
      "src": "assets/images/icon-96.png",
      "sizes": "96x96",
      "type": "image/png",
      "purpose": "any maskable"
    },
    {
      "src": "assets/images/icon-128.png",
      "sizes": "128x128",
      "type": "image/png",
      "purpose": "any maskable"
    },
    {
      "src": "assets/images/icon-144.png",
      "sizes": "144x144",
      "type": "image/png",
      "purpose": "any maskable"
    },
    {
      "src": "assets/images/icon-152.png",
      "sizes": "152x152",
      "type": "image/png",
      "purpose": "any maskable"
    },
    {
      "src": "assets/images/icon-192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "any maskable"
    },
    {
      "src": "assets/images/icon-384.png",
      "sizes": "384x384",
      "type": "image/png",
      "purpose": "any maskable"
    },
    {
      "src": "assets/images/icon-512.png",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "any maskable"
    }
  ],
  "categories": ["productivity", "business"],
  "screenshots": [
    {
      "src": "assets/images/screenshot1.png",
      "sizes": "540x720",
      "type": "image/png"
    }
  ]
}
{
  "name": "project",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {}
}

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.inventarioqr</groupId>
    <artifactId>inventario-qr-app</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <name>Inventario QR</name>
    <description>Aplicaci√≥n de inventario con c√≥digos QR para escritorio</description>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <javafx.version>21.0.1</javafx.version>
        <javafx.maven.plugin.version>0.0.8</javafx.maven.plugin.version>
    </properties>

    <dependencies>
        <!-- JavaFX Controls -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <!-- JavaFX FXML -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <!-- JavaFX Swing (para integraci√≥n con componentes Swing) -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-swing</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <!-- SQLite JDBC -->
        <dependency>
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
            <version>3.44.1.0</version>
        </dependency>

        <!-- ZXing para c√≥digos QR -->
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>core</artifactId>
            <version>3.5.3</version>
        </dependency>

        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>javase</artifactId>
            <version>3.5.3</version>
        </dependency>

        <!-- Webcam Capture para c√°mara -->
        <dependency>
            <groupId>com.github.sarxos</groupId>
            <artifactId>webcam-capture</artifactId>
            <version>0.3.12</version>
        </dependency>

        <!-- JSON para configuraci√≥n -->
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20231013</version>
        </dependency>

        <!-- JUnit para testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.10.1</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Maven Compiler Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                </configuration>
            </plugin>

            <!-- JavaFX Maven Plugin -->
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>${javafx.maven.plugin.version}</version>
                <configuration>
                    <mainClass>com.inventarioqr.app.InventarioQRApp</mainClass>
                </configuration>
            </plugin>

            <!-- Maven Shade Plugin para crear JAR ejecutable -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.5.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>com.inventarioqr.app.InventarioQRApp</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
# Inventario QR - Aplicaci√≥n Java para Visual Studio Code

Una aplicaci√≥n completa de gesti√≥n de inventario con c√≥digos QR desarrollada en Java usando JavaFX, optimizada para ejecutarse en Visual Studio Code.

## üöÄ Caracter√≠sticas

- **üìä Dashboard**: Estad√≠sticas en tiempo real del inventario
- **üìç Gesti√≥n de √Åreas**: Organiza productos por ubicaciones con colores personalizados
- **üì∑ Esc√°ner QR**: Usa la c√°mara web para escanear c√≥digos QR
- **üè∑Ô∏è Generador de QR**: Crea c√≥digos QR √∫nicos para cada producto
- **üíæ Base de datos SQLite**: Persistencia local de datos
- **üé® Interfaz moderna**: Dise√±o limpio y responsivo con JavaFX
- **üñ®Ô∏è Impresi√≥n de QR**: Imprime c√≥digos QR directamente desde la aplicaci√≥n

## üìã Requisitos

- **Java 17** o superior
- **Maven 3.6+**
- **Visual Studio Code** con extensiones Java
- **C√°mara web** (para esc√°ner QR)
- **Impresora** (para imprimir c√≥digos QR)

## üõ†Ô∏è Configuraci√≥n en Visual Studio Code

### 1. **Instalar extensiones necesarias**:
- **Extension Pack for Java** (Microsoft)
- **Maven for Java** (Microsoft)

### 2. **Abrir el proyecto**:
1. Abre Visual Studio Code
2. File ‚Üí Open Folder
3. Selecciona la carpeta del proyecto

### 3. **Configurar Java**:
- Aseg√∫rate de tener Java 17+ instalado
- VS Code deber√≠a detectar autom√°ticamente el proyecto Maven

## ‚ñ∂Ô∏è Ejecutar la aplicaci√≥n

### **Opci√≥n 1: Usando Maven**
```bash
mvn clean compile
mvn javafx:run
```

### **Opci√≥n 2: Desde VS Code**
1. Abre `src/main/java/com/inventarioqr/app/InventarioQRApp.java`
2. Presiona **F5** o haz clic en "Run Java"
3. O usa Ctrl+Shift+P ‚Üí "Java: Run"

### **Opci√≥n 3: Terminal integrado**
```bash
# En el terminal de VS Code
./mvnw javafx:run
```

## üì¶ Crear JAR ejecutable

```bash
mvn clean package
java -jar target/inventario-qr-app-1.0.0.jar
```

## üèóÔ∏è Estructura del Proyecto

```
src/
‚îú‚îÄ‚îÄ main/
‚îÇ   ‚îú‚îÄ‚îÄ java/com/inventarioqr/app/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ InventarioQRApp.java           # Clase principal
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ controllers/                   # Controladores de UI
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DashboardController.java   # Dashboard
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AreasController.java       # Gesti√≥n de √°reas
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ScanController.java        # Esc√°ner QR
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ CreateController.java      # Crear productos
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ models/                        # Modelos de datos
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Area.java                  # Modelo de √°rea
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Product.java               # Modelo de producto
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ database/                      # Gesti√≥n de BD
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ DatabaseManager.java      # Manager SQLite
‚îÇ   ‚îî‚îÄ‚îÄ resources/
‚îÇ       ‚îî‚îÄ‚îÄ styles/
‚îÇ           ‚îî‚îÄ‚îÄ app.css                    # Estilos JavaFX
‚îú‚îÄ‚îÄ pom.xml                                # Configuraci√≥n Maven
‚îî‚îÄ‚îÄ README.md
```

## üéØ Funcionalidades Detalladas

### **üìä Dashboard**
- Estad√≠sticas totales (productos, stock, √°reas)
- Productos con stock bajo
- Lista de productos recientes
- Indicadores visuales con colores

### **üìç Gesti√≥n de √Åreas**
- Crear √°reas con nombres y descripciones
- Colores personalizados para organizaci√≥n
- Vista de productos por √°rea
- Estad√≠sticas por √°rea

### **üì∑ Esc√°ner QR**
- Acceso a c√°mara web del sistema
- Escaneo en tiempo real
- B√∫squeda autom√°tica de productos
- Opci√≥n de crear producto si no existe

### **‚ûï Crear Productos**
- Formulario completo para nuevos productos
- Generaci√≥n autom√°tica de c√≥digos QR √∫nicos
- Vista previa del c√≥digo QR
- Asignaci√≥n a √°reas espec√≠ficas
- Validaci√≥n de campos
- **Impresi√≥n directa del c√≥digo QR**

## üîß Tecnolog√≠as Utilizadas

- **Java 17** - Lenguaje principal
- **JavaFX 21** - Framework de UI
- **Maven** - Gesti√≥n de dependencias
- **SQLite JDBC** - Base de datos local
- **ZXing** - Generaci√≥n y lectura de QR
- **Webcam Capture** - Acceso a c√°mara web
- **Java Print API** - Impresi√≥n de documentos

## üêõ Troubleshooting

### **Error de JavaFX**
```bash
# Si JavaFX no se encuentra
export PATH_TO_FX=/path/to/javafx/lib
java --module-path $PATH_TO_FX --add-modules javafx.controls,javafx.fxml -jar app.jar
```

### **Error de c√°mara**
- Verifica que la c√°mara est√© conectada
- Cierra otras aplicaciones que usen la c√°mara
- Ejecuta como administrador si es necesario

### **Error de compilaci√≥n**
```bash
# Limpiar y recompilar
mvn clean
mvn compile
```

### **Error de impresi√≥n**
- Verifica que la impresora est√© conectada y configurada
- Aseg√∫rate de tener permisos de impresi√≥n
- Revisa que haya papel en la impresora

### **Problemas con VS Code**
1. Ctrl+Shift+P ‚Üí "Java: Reload Projects"
2. Reinicia VS Code
3. Verifica que Java 17+ est√© configurado

## üì± Caracter√≠sticas de la Interfaz

- **Dise√±o responsivo** que se adapta al tama√±o de ventana
- **Navegaci√≥n por pesta√±as** intuitiva
- **Temas modernos** con colores profesionales
- **Animaciones suaves** para mejor UX
- **Estados vac√≠os** informativos
- **Di√°logos modales** para acciones importantes

## üîí Seguridad y Datos

- **Base de datos local** SQLite (archivo `inventory.db`)
- **Sin conexi√≥n externa** requerida
- **Datos persistentes** entre sesiones
- **Backup autom√°tico** recomendado del archivo DB

La aplicaci√≥n est√° completamente optimizada para desarrollo y ejecuci√≥n en Visual Studio Code, proporcionando una experiencia de desarrollo fluida y una interfaz de usuario profesional.#   i n v e n t a r i o 
 
 
const CACHE_NAME = 'inventario-qr-v1';
const urlsToCache = [
  '/',
  '/index.php',
  '/assets/css/style.css',
  '/assets/js/app.js',
  '/assets/images/icon-192.png',
  '/manifest.json',
  'https://cdn.jsdelivr.net/npm/qrcode@1.5.3/build/qrcode.min.js',
  'https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.js'
];

// Instalar Service Worker
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('Cache abierto');
        return cache.addAll(urlsToCache);
      })
  );
});

// Interceptar requests
self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        // Devolver desde cache si existe
        if (response) {
          return response;
        }
        
        // Sino, hacer fetch normal
        return fetch(event.request).then(response => {
          // Verificar si es una respuesta v√°lida
          if (!response || response.status !== 200 || response.type !== 'basic') {
            return response;
          }
          
          // Clonar la respuesta
          const responseToCache = response.clone();
          
          caches.open(CACHE_NAME)
            .then(cache => {
              cache.put(event.request, responseToCache);
            });
          
          return response;
        });
      })
  );
});

// Actualizar Service Worker
self.addEventListener('activate', event => {
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheName !== CACHE_NAME) {
            console.log('Eliminando cache antiguo:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});

// Manejar mensajes del cliente
self.addEventListener('message', event => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Notificaciones push (opcional)
self.addEventListener('push', event => {
  const options = {
    body: event.data ? event.data.text() : 'Nueva notificaci√≥n',
    icon: '/assets/images/icon-192.png',
    badge: '/assets/images/icon-72.png',
    vibrate: [100, 50, 100],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: 1
    },
    actions: [
      {
        action: 'explore',
        title: 'Ver',
        icon: '/assets/images/checkmark.png'
      },
      {
        action: 'close',
        title: 'Cerrar',
        icon: '/assets/images/xmark.png'
      }
    ]
  };
  
  event.waitUntil(
    self.registration.showNotification('Inventario QR', options)
  );
});

// Manejar clicks en notificaciones
self.addEventListener('notificationclick', event => {
  event.notification.close();
  
  if (event.action === 'explore') {
    event.waitUntil(
      clients.openWindow('/')
    );
  }
});
